<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Giovanni Torres - Collectd</title><link href="http://giovannitorres.me/" rel="alternate"></link><link href="http://giovannitorres.me/feeds/collectd.atom.xml" rel="self"></link><id>http://giovannitorres.me/</id><updated>2015-07-03T12:47:00-04:00</updated><entry><title>Using Collectd, Python and Graphite to Graph Slurm Partitions</title><link href="http://giovannitorres.me/using-collectd-python-and-graphite-to-graph-slurm-partitions.html" rel="alternate"></link><published>2015-07-03T12:47:00-04:00</published><updated>2015-07-03T12:47:00-04:00</updated><author><name>Giovanni Torres</name></author><id>tag:giovannitorres.me,2015-07-03:/using-collectd-python-and-graphite-to-graph-slurm-partitions.html</id><summary type="html">&lt;h4 id="introduction"&gt;Introduction&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://collectd.org/"&gt;Collectd&lt;/a&gt; comes with a long &lt;a href="https://collectd.org/wiki/index.php/Table_of_Plugins"&gt;list of
plugins&lt;/a&gt;.  In a previous
&lt;a href="http://giovannitorres.me/enabling-almost-all-collectd-plugins-on-centos-6.html"&gt;article&lt;/a&gt;, we showed how to install the
necessary dependencies to enable most of the collectd plugins when compiling
collectd from source.&lt;/p&gt;
&lt;p&gt;One of these plugins is the &lt;a href="https://collectd.org/wiki/index.php/Plugin:Python"&gt;Python
plugin&lt;/a&gt;, which is a binding
that allows you to write â€¦&lt;/p&gt;</summary><content type="html">&lt;h4 id="introduction"&gt;Introduction&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://collectd.org/"&gt;Collectd&lt;/a&gt; comes with a long &lt;a href="https://collectd.org/wiki/index.php/Table_of_Plugins"&gt;list of
plugins&lt;/a&gt;.  In a previous
&lt;a href="http://giovannitorres.me/enabling-almost-all-collectd-plugins-on-centos-6.html"&gt;article&lt;/a&gt;, we showed how to install the
necessary dependencies to enable most of the collectd plugins when compiling
collectd from source.&lt;/p&gt;
&lt;p&gt;One of these plugins is the &lt;a href="https://collectd.org/wiki/index.php/Plugin:Python"&gt;Python
plugin&lt;/a&gt;, which is a binding
that allows you to write Python scripts that behave as custom read and write
plugins for collectd. With this plugin enabled, the collectd daemon will embed a Python
interpreter and can directly run Python scripts without having to launch a new
interpreter every time the scripts need to run.&lt;/p&gt;
&lt;p&gt;In this article, we will demonstrate how to write a Python script for collectd
that will graph CPU cores by state from &lt;a href="http://slurm.schedmd.com"&gt;Slurm&lt;/a&gt;, an HPC
resource manager. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id="prerequisites"&gt;Prerequisites&lt;/h4&gt;
&lt;p&gt;This article assumes you have some familiarity with Collectd and have an
existing Graphite installation. For instructions on how to install Graphite,
read the &lt;a href="https://graphite.readthedocs.org/en/stable/install.html"&gt;installation
docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Furthermore, details about Slurm is outside the scope of this article and only
used as an real-world example.&lt;/p&gt;
&lt;p&gt;Lastly, of the python modules used in the example below, the 
&lt;a href="https://pypi.python.org/pypi/pyparsing/2.0.3"&gt;PyParsing&lt;/a&gt; module is not a core
Python module.  You can, however, install it easily with Pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install pyparsing
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id="enabling-the-python-plugin"&gt;Enabling the Python Plugin&lt;/h4&gt;
&lt;p&gt;The default &lt;em&gt;collectd.conf&lt;/em&gt; comes with the Python plugin disabled:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;## &amp;lt;LoadPlugin python&amp;gt;
##   Globals true
## &amp;lt;/LoadPlugin&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simply uncomment the stanza to have collectd load this plugin at run time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;LoadPlugin&lt;/span&gt; &lt;span class="err"&gt;python&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Globals true
&lt;span class="nt"&gt;&amp;lt;/LoadPlugin&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id="writing-a-python-read-plugin"&gt;Writing a Python Read Plugin&lt;/h4&gt;
&lt;p&gt;The &lt;a href="https://collectd.org/documentation/manpages/collectd-python.5.shtml"&gt;collectd-python
manpage&lt;/a&gt;
documents how to use the Python plugin structure to create your own plugins. We
will walk through writing a script, section by section, to understand how to
gather and dispatch metrics to collectd.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h5 id="importing-modules"&gt;Importing Modules&lt;/h5&gt;
&lt;p&gt;The first part of our script will import the necessary modules.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;collectd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyparsing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alphanums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first import statement loads the collectd module.  This is the module that
will register the read and write functions with collectd.  The remaining
modules are used elsewhere in the script to gather information.&lt;/p&gt;
&lt;h5 id="gathering-metrics"&gt;Gathering Metrics&lt;/h5&gt;
&lt;p&gt;The purpose of the plugin is to gather metrics and feed it to collectd.  From
there, collectd will send it wherever it is configured to, for example to RRD
files, to Graphite or another time-series database. &lt;/p&gt;
&lt;p&gt;Our example uses the subprocess module to execute a Slurm command that
will return the number of cores by state per partition in a parsable format.
This is done using the &lt;strong&gt;sinfo&lt;/strong&gt; command.  It then uses the pyparsing module to
parse the output.  Lastly, it iterates over the output and returns a
dictionary.  This will be used in the &lt;em&gt;read_callback&lt;/em&gt; function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_cpus_by_state&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Returns a dictionary of CPU cores and their states, per Slurm&lt;/span&gt;
&lt;span class="sd"&gt;    partition.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;cores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="n"&gt;cores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;all-allocated&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;cores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;all-idle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;cores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;all-other&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;cores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;all-total&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="n"&gt;sinfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/path/to/sinfo&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;used_core_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;sinfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%P %C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--noheader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;used_core_count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

        &lt;span class="n"&gt;part_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphanums&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;part_parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scanString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;partition&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;allocated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;cores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-allocated&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allocated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-idle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-other&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-total&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;cores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;all-allocated&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allocated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;all-idle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;all-other&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;all-total&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cores&lt;/span&gt;

    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id="taking-care-of-sigchld"&gt;Taking care of SIGCHLD&lt;/h5&gt;
&lt;p&gt;This particular example uses the &lt;em&gt;subprocess&lt;/em&gt; module to fork a child process that will execute
the &lt;em&gt;sinfo&lt;/em&gt; command.  The Python plugin is a parent to this forked process, and
as such, the forked process will send a &lt;strong&gt;SIGCHLD&lt;/strong&gt; signal to the parent process upon
completion. Collectd, however, will ignore the &lt;strong&gt;SIGCHLD&lt;/strong&gt; signal that the
parent Python plugin process is waiting for.  As a result, the Python plugin
will throw an OSError exception when the child process terminates and logs the
following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;Unhandled python exception in read callback: OSError: [Errno 10] No child processes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function will restore the default SIGCHLD behavior so that the
plugin can create new processes without throwing exceptions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;restore_sigchld&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGCHLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIG_DFL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id="defining-a-read-callback"&gt;Defining a Read Callback&lt;/h5&gt;
&lt;p&gt;The purpose of the read callback is to setup the &lt;em&gt;Values&lt;/em&gt; object with the
parameters of the metrics you are dispatching to collectd.  It sets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;host (slurm, which is not a real host)&lt;/li&gt;
&lt;li&gt;plugin name (core_states)&lt;/li&gt;
&lt;li&gt;type of metric (gauge)&lt;/li&gt;
&lt;li&gt;submit interval (30 seconds)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is required to abide by collectd's &lt;a href="https://collectd.org/wiki/index.php/Naming_schema"&gt;naming
schema&lt;/a&gt;. Therefore, the
resulting metric name will be &lt;strong&gt;slurm.core_states.gauge-&lt;metric_name&gt;&lt;/strong&gt;, where
metric_name refers to each of the keys in the dictionary returned by the
&lt;em&gt;get_cpus_by_state()&lt;/em&gt; function.  Finally, the metric is dispatched to collectd.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Callback function for dispatching data into collectd&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;cores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_cpus_by_state&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;cores&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# for each key in each partition output, put the value&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cores&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;metric&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;metric&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;core_states&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;metric&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;slurm&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;metric&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
            &lt;span class="n"&gt;metric&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gauge&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;metric&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type_instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
            &lt;span class="n"&gt;metric&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
            &lt;span class="n"&gt;metric&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id="registering-functions"&gt;Registering Functions&lt;/h5&gt;
&lt;p&gt;The final lines of the script registers two callbacks: an init function to
restore the behavior of &lt;em&gt;SIGCHLD&lt;/em&gt; and the other to periodically run the
read_callback function, which in turn calls the get_cpus_by_state() function to
gather metrics and dispatch the values to the daemon.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;restore_sigchld&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;collectd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save all the bits in a file, such as &lt;strong&gt;slurm_core_states.py&lt;/strong&gt; (available here
as a &lt;a href="https://gist.github.com/giovtorres/5125ca7c248d51388e40"&gt;gist&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id="configuring-the-python-plugin-section"&gt;Configuring the Python Plugin Section&lt;/h4&gt;
&lt;p&gt;Now that we have enabled the Python plugin in collectd and wrote a read plugin,
the last thing needed is to configure the plugin in collectd's configuration
file. Add the following configuration stanza to &lt;strong&gt;collectd.conf&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Plugin&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;ModulePath&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/path/to/python/plugin&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;LogTraces&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;Interactive&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;
  &lt;span class="n"&gt;Import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;slurm_core_states&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Plugin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;ModulePath&lt;/em&gt; option prepends the path to &lt;em&gt;sys.path&lt;/em&gt;, thus making your
plugin available to Python when importing it.  Otherwise, you would get an
&lt;strong&gt;ImportError&lt;/strong&gt; exception.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;LogTraces&lt;/em&gt; option will log any exceptions and the full stacktrace thrown
by the plugin. This is good for debugging.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Interactive&lt;/em&gt; option will launch an interactive Python interpreter.  This
script will not run interactively and is therefore set to &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Import&lt;/em&gt; option imports our plugin into collectd's embedded Python
interpreter.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id="verifying"&gt;Verifying&lt;/h4&gt;
&lt;p&gt;After restarting the collectd service, check the logs to make sure there are no
issues with the plugin.  If there are no warning or errors in the logs, verify
that the plugin is working by querying the metrics.&lt;/p&gt;
&lt;p&gt;This step will vary depending on where your metrics are stored.  For example,
if the metrics are written to a Graphite instance, you could query the metrics
using the Graphite URL API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -s 
&lt;span class="s2"&gt;&amp;quot;http://graphite.example.com/render?target=slurm.core_states.gauge-all-allocated&amp;amp;from=-1mins&amp;amp;format=json&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; python -m json.tool
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This fetches the cumulative number of allocated cores across all Slurm partitions, in json format. The last two datapoints are shown below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;datapoints&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="mf"&gt;19488.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="mi"&gt;1435969380&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="mf"&gt;19488.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="mi"&gt;1435969410&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;slurm.core_states.gauge-all-allocated&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And finally, here is what a Graphite graph would look like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Slurm Core States" src="http://giovannitorres.me/images/slurm_core_states.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id="conclusion"&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;This is just one example of how to use Python and collectd to gather metrics
and visualize them.  You could write a plugin with a similar structure to
dispatch custom metrics to your metric collector, such as the Graphite suite or
any other time-series database.&lt;/p&gt;</content><category term="collectd"></category><category term="python"></category><category term="slurm"></category></entry><entry><title>Enabling (Almost All) Collectd Plugins on CentOS 6</title><link href="http://giovannitorres.me/enabling-almost-all-collectd-plugins-on-centos-6.html" rel="alternate"></link><published>2015-06-15T17:34:00-04:00</published><updated>2015-06-15T17:34:00-04:00</updated><author><name>Giovanni Torres</name></author><id>tag:giovannitorres.me,2015-06-15:/enabling-almost-all-collectd-plugins-on-centos-6.html</id><summary type="html">&lt;h4 id="introduction"&gt;Introduction&lt;/h4&gt;
&lt;p&gt;There are a variety of ways to extract system resource information from a Linux
server. Some of these utilities are triggered by cron, such as sysstat, while others are
based on a predefined check interval, such as Nagios.  Others are meant to be used
interactively, such as htop or â€¦&lt;/p&gt;</summary><content type="html">&lt;h4 id="introduction"&gt;Introduction&lt;/h4&gt;
&lt;p&gt;There are a variety of ways to extract system resource information from a Linux
server. Some of these utilities are triggered by cron, such as sysstat, while others are
based on a predefined check interval, such as Nagios.  Others are meant to be used
interactively, such as htop or vmstat.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://collectd.org" title="collectd"&gt;collectd&lt;/a&gt; is another utility that gathers
system metrics on a given system.  It is written in C, giving it great
performance.  Its versatility, however, comes from the almost 100 plugins that
is bundled with the daemon.  These plugins include various read and write
plugins.  Some of the read plugins collect the standard Linux subsystem
metrics, such as CPU, Disk, Memory and Network, while other read plugins are
more specialized, such as reading Apache httpd or DNS metrics.&lt;/p&gt;
&lt;p&gt;collectd gathers these metrics, but where are they stored?  collectd has a
handful of write plugins that allow you either store the metrics in local
round-robin databases (RRDs) or externally to another collector, such as
Graphite.&lt;/p&gt;
&lt;p&gt;The collectd package in the EPEL 6 repository package is out of date.  Often,
users opt to compile collectd from source to obtain a newer, more recent version.
The process of compiling collectd can be somewhat daunting at times because the
more plugins that are available, the more dependencies are necessary.&lt;/p&gt;
&lt;p&gt;The goal of this guide is to list the necessary packages for building collectd
from source with most of the plugins enabled.  These dependencies can all be
found in the CentOS Base and EPEL repositories.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id="prerequisites"&gt;Prerequisites&lt;/h4&gt;
&lt;p&gt;Compiling any package from source requires a compiler.  If you don't already
have one installed, go ahead and install the GNU GCC compiler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install gcc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For this exercise, you will also need kernel and the C library header files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install kernel-headers glibc-headers
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id="downloading-collectd"&gt;Downloading collectd&lt;/h4&gt;
&lt;p&gt;A link to the collectd source is hosted on the main page of the &lt;a href="https://collectd.org" title="collectd website"&gt;collectd
website&lt;/a&gt;.  Download and untar the
the latest source tarball.  At the time of this writing, version 5.5.0 is the
latest stable version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl --progress https://collectd.org/files/collectd-5.5.0.tar.gz | tar xz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id="configuring-collectd"&gt;Configuring collectd&lt;/h4&gt;
&lt;p&gt;After downloading and extracting the source files, change to that directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd collectd-5.5.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This package can be configured, built and installed with the typical &lt;strong&gt;configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make
install&lt;/strong&gt; sequence of commands.&lt;/p&gt;
&lt;p&gt;Start by running the configure step so that we can have a look at the
available plugins:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./configure
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command will output quite a bit to the screen, checking your system for
the presence of various libraries, header files and binaries in the process.
Have a look at the summary at the end, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Configuration:
  Libraries:
    intel mic . . . . . . no (MicAccessApi not found)
    libaquaero5 . . . . . no (libaquaero5.h not found)
    libatasmart . . . . . no (atasmart.h not found)
    libcurl . . . . . . . no (curl-config failed)
    libdbi  . . . . . . . no (dbi/dbi.h not found)
    libesmtp  . . . . . . no (libesmtp not found)
    libganglia  . . . . . no (gm_protocol.h not found)
[...output truncated...]
  Modules:
    aggregation . . . . . yes
    amqp    . . . . . . . no
    apache  . . . . . . . no
    apcups  . . . . . . . yes
    apple_sensors . . . . no
    aquaero . . . . . . . no
    ascent  . . . . . . . no
    barometer . . . . . . no
[...output truncated...]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The summary at the end shows the various plugins and whether or not the
configure step was able to locate the necessary prerequisites to build each plugin.&lt;/p&gt;
&lt;p&gt;Even though the configure step was not able to find many libraries or modules,
collectd will still compile successfully, albeit without these plugins.  Often,
you would like to enable several plugins at compile time, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./configure --enable-java --enable-python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Without the appropriate package dependencies installed, the configure step will
output the following line at the very end:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Some plugins are missing dependencies - see the summary&lt;/span&gt;
&lt;span class="s2"&gt;above for details&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use the two tables below to install the appropriate RPM packages for the
plugins you would like to enable.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id="libaries"&gt;Libaries&lt;/h4&gt;
&lt;p&gt;The following table shows the collectd libraries and their corresponding RPM
package dependencies:&lt;/p&gt;
&lt;table&gt;
    &lt;col width="150"&gt;
    &lt;col width="300"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Library&lt;/tn&gt;
            &lt;th&gt;RPM Package(s)&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;libatasmart&lt;/td&gt;
            &lt;td&gt;libatasmart-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libcurl&lt;/td&gt;
            &lt;td&gt;libcurl-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libdbi&lt;/td&gt;
            &lt;td&gt;libdbi-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libesmtp&lt;/td&gt;
            &lt;td&gt;libesmtp-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libganglia&lt;/td&gt;
            &lt;td&gt;ganglia-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libgcrypt&lt;/td&gt;
            &lt;td&gt;libgcrypt-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libhal&lt;/td&gt;
            &lt;td&gt;hal-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libhiredis&lt;/td&gt;
            &lt;td&gt;hiredis-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libiptc&lt;/td&gt;
            &lt;td&gt;iptables-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libjvm&lt;/td&gt;
            &lt;td&gt;java-1.8.0-openjdk-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libldap&lt;/td&gt;
            &lt;td&gt;openldap-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;liblvm2app&lt;/td&gt;
            &lt;td&gt;lvm2-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libmemcached&lt;/td&gt;
            &lt;td&gt;libmemcached-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libmnl&lt;/td&gt;
            &lt;td&gt;libmnl-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libmodbus&lt;/td&gt;
            &lt;td&gt;libmodbus-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libmysql&lt;/td&gt;
            &lt;td&gt;mysql-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libnetsnmp&lt;/td&gt;
            &lt;td&gt;net-snmp-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libnotify&lt;/td&gt;
            &lt;td&gt;libnotify-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libopenipmi&lt;/td&gt;
            &lt;td&gt;OpenIPMI-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;liboping&lt;/td&gt;
            &lt;td&gt;liboping-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libpcap&lt;/td&gt;
            &lt;td&gt;libpcap-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libperl&lt;/td&gt;
            &lt;td&gt;perl-devel, perl-ExtUtils-Embed&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libpq&lt;/td&gt;
            &lt;td&gt;postgresql-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;librabbitmq&lt;/td&gt;
            &lt;td&gt;librabbitmq-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;librrd&lt;/td&gt;
            &lt;td&gt;rrdtool-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libsensors&lt;/td&gt;
            &lt;td&gt;lm_sensors-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libstatgrab&lt;/td&gt;
            &lt;td&gt;libstatgrab-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libudev&lt;/td&gt;
            &lt;td&gt;libudev-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libupsclient&lt;/td&gt;
            &lt;td&gt;nut-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libvarnish&lt;/td&gt;
            &lt;td&gt;varnish-libs-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libvirt&lt;/td&gt;
            &lt;td&gt;libvirt-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libxml2&lt;/td&gt;
            &lt;td&gt;libxml2-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;libyajl&lt;/td&gt;
            &lt;td&gt;yajl-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;protobuf-c&lt;/td&gt;
            &lt;td&gt;protobuf-c-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;python&lt;/td&gt;
            &lt;td&gt;python-devel&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id="modules"&gt;Modules&lt;/h4&gt;
&lt;p&gt;The following table shows the collectd modules and their corresponding RPM
package dependencies:&lt;/p&gt;
&lt;table&gt;
    &lt;col width="150"&gt;
    &lt;col width="300"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Module&lt;/tn&gt;
            &lt;th&gt;RPM Package(s)&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;amqp&lt;/td&gt;
            &lt;td&gt;librabbitmq-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;apache&lt;/td&gt;
            &lt;td&gt;libcurl-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;bind&lt;/td&gt;
            &lt;td&gt;libcurl-devel, libxml2-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;ceph&lt;/td&gt;
            &lt;td&gt;yajl-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;curl&lt;/td&gt;
            &lt;td&gt;libcurl-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;curl_json&lt;/td&gt;
            &lt;td&gt;libcurl-devel, yajl-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;curl_xml&lt;/td&gt;
            &lt;td&gt;libcurl-devel, libxml2-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;dbi&lt;/td&gt;
            &lt;td&gt;libdbi-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;dns&lt;/td&gt;
            &lt;td&gt;libpcap-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;gmond&lt;/td&gt;
            &lt;td&gt;ganglia-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;ipmi&lt;/td&gt;
            &lt;td&gt;OpenIPMI-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;iptables&lt;/td&gt;
            &lt;td&gt;iptables-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;java&lt;/td&gt;
            &lt;td&gt;java-1.8.0-openjdk-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;log_logstash&lt;/td&gt;
            &lt;td&gt;yajl-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;lvm&lt;/td&gt;
            &lt;td&gt;lvm2-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;memcachec&lt;/td&gt;
            &lt;td&gt;libmemcached-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;mysql&lt;/td&gt;
            &lt;td&gt;mysql-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;netlink&lt;/td&gt;
            &lt;td&gt;libmnl-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;nginx&lt;/td&gt;
            &lt;td&gt;libcurl-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;notify_desktop&lt;/td&gt;
            &lt;td&gt;libnotify-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;notify_email&lt;/td&gt;
            &lt;td&gt;libesmtp-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;nut&lt;/td&gt;
            &lt;td&gt;nut-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;openldap&lt;/td&gt;
            &lt;td&gt;openldap-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;perl&lt;/td&gt;
            &lt;td&gt;perl-devel, perl-ExtUtils-Embed&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;ping&lt;/td&gt;
            &lt;td&gt;liboping-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;postgresql&lt;/td&gt;
            &lt;td&gt;postgresql-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;python&lt;/td&gt;
            &lt;td&gt;python-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;redis&lt;/td&gt;
            &lt;td&gt;hiredis-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;rrdtool&lt;/td&gt;
            &lt;td&gt;rrdtool-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;smart&lt;/td&gt;
            &lt;td&gt;libatasmart-devel, libudev-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;snmp&lt;/td&gt;
            &lt;td&gt;net-snmp-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;varnish&lt;/td&gt;
            &lt;td&gt;varnish-libs-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;virt&lt;/td&gt;
            &lt;td&gt;libvirt-devel, libxml2-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;write_http&lt;/td&gt;
            &lt;td&gt;libcurl-devel&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;write_redis&lt;/td&gt;
            &lt;td&gt;hiredis-devel&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id="notes"&gt;Notes&lt;/h4&gt;
&lt;p&gt;Not all plugin dependencies were available from the CentOS Base and EPEL
repositories.  For these particular plugins, you would either have to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;configure another YUM repository that has the necessary RPMs&lt;/li&gt;
&lt;li&gt;download and install the individual RPM from a third-party site&lt;/li&gt;
&lt;li&gt;build your own RPM&lt;/li&gt;
&lt;li&gt;compile the dependency from source&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With regards to the java plugin, the 1.6.0 and 1.7.0 openjdk versions, in
addition to the 1.8.0 version listed above, are able to satisfy the java
dependency.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id="conclusion"&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;Once the plugin dependencies are sorted out, the &lt;strong&gt;make&lt;/strong&gt; and &lt;strong&gt;make install&lt;/strong&gt;
steps typically go without a hitch.  In a future post, I will outline how to
build the collectd RPMs using the latest available version. &lt;/p&gt;</content><category term="collectd"></category></entry></feed>